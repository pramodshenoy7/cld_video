{"version":3,"sources":["../../../../src/streaming/ManifestUpdater.js"],"names":["ManifestUpdater","context","eventBus","getInstance","instance","logger","refreshDelay","refreshTimer","isPaused","isStopped","isUpdating","manifestLoader","manifestModel","adapter","errHandler","settings","setup","getLogger","setConfig","config","initialize","resetInitialSettings","on","Events","STREAMS_COMPOSED","onStreamsComposed","PLAYBACK_STARTED","onPlaybackStarted","PLAYBACK_PAUSED","onPlaybackPaused","INTERNAL_MANIFEST_LOADED","onManifestLoaded","setManifest","manifest","update","NaN","stopManifestRefreshTimer","reset","off","clearTimeout","startManifestRefreshTimer","delay","isNaN","debug","setTimeout","onRefreshTimer","refreshManifest","getValue","url","location","getLocation","load","type","DashConstants","DYNAMIC","STATIC","trigger","DYNAMIC_TO_STATIC","setValue","date","Date","latencyOfLastUpdate","getTime","loadedTime","getManifestUpdatePeriod","MANIFEST_UPDATED","info","get","streaming","manifestUpdateRetryInterval","e","error","code","Errors","MANIFEST_LOADER_PARSING_FAILURE_ERROR_CODE","scheduleWhilePaused","__dashjs_factory_name","FactoryMaker","getClassFactory"],"mappings":"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","file":"ManifestUpdater.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport EventBus from '../core/EventBus';\nimport Events from '../core/events/Events';\nimport FactoryMaker from '../core/FactoryMaker';\nimport Debug from '../core/Debug';\nimport Errors from '../core/errors/Errors';\nimport DashConstants from '../dash/constants/DashConstants';\n\nfunction ManifestUpdater() {\n\n    const context = this.context;\n    const eventBus = EventBus(context).getInstance();\n\n    let instance,\n        logger,\n        refreshDelay,\n        refreshTimer,\n        isPaused,\n        isStopped,\n        isUpdating,\n        manifestLoader,\n        manifestModel,\n        adapter,\n        errHandler,\n        settings;\n\n    function setup() {\n        logger = Debug(context).getInstance().getLogger(instance);\n    }\n\n    function setConfig(config) {\n        if (!config) return;\n\n        if (config.manifestModel) {\n            manifestModel = config.manifestModel;\n        }\n        if (config.adapter) {\n            adapter = config.adapter;\n        }\n        if (config.manifestLoader) {\n            manifestLoader = config.manifestLoader;\n        }\n        if (config.errHandler) {\n            errHandler = config.errHandler;\n        }\n        if (config.settings) {\n            settings = config.settings;\n        }\n    }\n\n    function initialize() {\n        resetInitialSettings();\n\n        eventBus.on(Events.STREAMS_COMPOSED, onStreamsComposed, this);\n        eventBus.on(Events.PLAYBACK_STARTED, onPlaybackStarted, this);\n        eventBus.on(Events.PLAYBACK_PAUSED, onPlaybackPaused, this);\n        eventBus.on(Events.INTERNAL_MANIFEST_LOADED, onManifestLoaded, this);\n    }\n\n    function setManifest(manifest) {\n        update(manifest);\n    }\n\n    function resetInitialSettings() {\n        refreshDelay = NaN;\n        isUpdating = false;\n        isPaused = true;\n        isStopped = false;\n        stopManifestRefreshTimer();\n    }\n\n    function reset() {\n\n        eventBus.off(Events.PLAYBACK_STARTED, onPlaybackStarted, this);\n        eventBus.off(Events.PLAYBACK_PAUSED, onPlaybackPaused, this);\n        eventBus.off(Events.STREAMS_COMPOSED, onStreamsComposed, this);\n        eventBus.off(Events.INTERNAL_MANIFEST_LOADED, onManifestLoaded, this);\n\n        resetInitialSettings();\n    }\n\n    function stopManifestRefreshTimer() {\n        if (refreshTimer !== null) {\n            clearTimeout(refreshTimer);\n            refreshTimer = null;\n        }\n    }\n\n    function startManifestRefreshTimer(delay) {\n        stopManifestRefreshTimer();\n\n        if (isStopped) {\n            return;\n        }\n\n        if (isNaN(delay) && !isNaN(refreshDelay)) {\n            delay = refreshDelay * 1000;\n        }\n\n        if (!isNaN(delay)) {\n            logger.debug('Refresh manifest in ' + delay + ' milliseconds.');\n            refreshTimer = setTimeout(onRefreshTimer, delay);\n        }\n    }\n\n    function refreshManifest() {\n        isUpdating = true;\n        const manifest = manifestModel.getValue();\n        let url = manifest.url;\n        const location = adapter.getLocation(manifest);\n        if (location) {\n            url = location;\n        }\n        manifestLoader.load(url);\n    }\n\n    function update(manifest) {\n\n        // See DASH-IF IOP v4.3 section 4.6.4 \"Transition Phase between Live and On-Demand\"\n        // Stop manifest update, ignore static manifest and signal end of dynamic stream to detect end of stream\n        if (manifestModel.getValue() && manifestModel.getValue().type === DashConstants.DYNAMIC && manifest.type === DashConstants.STATIC) {\n            eventBus.trigger(Events.DYNAMIC_TO_STATIC);\n            isUpdating = false;\n            isStopped = true;\n            return;\n        }\n\n        manifestModel.setValue(manifest);\n\n        const date = new Date();\n        const latencyOfLastUpdate = (date.getTime() - manifest.loadedTime.getTime()) / 1000;\n        refreshDelay = adapter.getManifestUpdatePeriod(manifest, latencyOfLastUpdate);\n        // setTimeout uses a 32 bit number to store the delay. Any number greater than it\n        // will cause event associated with setTimeout to trigger immediately\n        if (refreshDelay * 1000 > 0x7FFFFFFF) {\n            refreshDelay = 0x7FFFFFFF / 1000;\n        }\n        eventBus.trigger(Events.MANIFEST_UPDATED, { manifest: manifest });\n        logger.info('Manifest has been refreshed at ' + date + '[' + date.getTime() / 1000 + '] ');\n\n        if (!isPaused) {\n            startManifestRefreshTimer();\n        }\n    }\n\n    function onRefreshTimer() {\n        if (isPaused) {\n            return;\n        }\n        if (isUpdating) {\n            startManifestRefreshTimer(settings.get().streaming.manifestUpdateRetryInterval);\n            return;\n        }\n        refreshManifest();\n    }\n\n    function onManifestLoaded(e) {\n        if (!e.error) {\n            update(e.manifest);\n        } else if (e.error.code === Errors.MANIFEST_LOADER_PARSING_FAILURE_ERROR_CODE) {\n            errHandler.error(e.error);\n        }\n    }\n\n    function onPlaybackStarted (/*e*/) {\n        isPaused = false;\n        startManifestRefreshTimer();\n    }\n\n    function onPlaybackPaused(/*e*/) {\n        isPaused = !settings.get().streaming.scheduleWhilePaused;\n\n        if (isPaused) {\n            stopManifestRefreshTimer();\n        }\n    }\n\n    function onStreamsComposed(/*e*/) {\n        // When streams are ready we can consider manifest update completed. Resolve the update promise.\n        isUpdating = false;\n    }\n\n    instance = {\n        initialize: initialize,\n        setManifest: setManifest,\n        refreshManifest: refreshManifest,\n        setConfig: setConfig,\n        reset: reset\n    };\n\n    setup();\n    return instance;\n}\nManifestUpdater.__dashjs_factory_name = 'ManifestUpdater';\nexport default FactoryMaker.getClassFactory(ManifestUpdater);\n"]}