{"version":3,"sources":["../../../../../src/streaming/net/HTTPLoader.js"],"names":["HTTPLoader","cfg","context","errHandler","dashMetrics","mediaPlayerModel","requestModifier","boxParser","useFetch","errors","requestTimeout","instance","requests","delayedRequests","retryRequests","downloadErrorToRequestTypeMap","cmcdModel","logger","setup","getInstance","getLogger","HTTPRequest","MPD_TYPE","DOWNLOAD_ERROR_ID_MANIFEST_CODE","XLINK_EXPANSION_TYPE","DOWNLOAD_ERROR_ID_XLINK_CODE","INIT_SEGMENT_TYPE","DOWNLOAD_ERROR_ID_INITIALIZATION_CODE","MEDIA_SEGMENT_TYPE","DOWNLOAD_ERROR_ID_CONTENT_CODE","INDEX_SEGMENT_TYPE","BITSTREAM_SWITCHING_SEGMENT_TYPE","OTHER_TYPE","internalLoad","config","remainingAttempts","request","traces","firstProgress","needFailureReport","requestStartTime","Date","lastTraceTime","lastTraceReceivedCount","httpRequest","Error","handleLoaded","success","requestStartDate","requestEndDate","firstByteDate","checkExistenceOnly","addHttpRequest","response","responseURL","status","getAllResponseHeaders","responseHeaders","type","addManifestUpdate","onloadend","indexOf","splice","retryRequest","push","timeout","setTimeout","getRetryIntervalsForType","error","DashJSError","url","statusText","complete","progress","event","currentTime","lengthComputable","total","loaded","bytesLoaded","bytesTotal","noTrace","s","d","time","getTime","b","onload","onabort","abort","ontimeout","timeoutMessage","percentageComplete","toFixed","warn","loader","window","fetch","responseType","create","modifiedUrl","modifyRequestURL","additionalQueryParameter","_getAdditionalQueryParameter","Utils","addAditionalQueryParameterToUrl","verb","HEAD","GET","withCredentials","getXHRWithCredentialsForType","method","onend","onerror","now","isNaN","delayLoadingTime","load","delayedRequest","delayTimeout","e","cmcdQueryParameter","getQueryParameter","getRetryAttemptsForType","forEach","clearTimeout","t","x","onprogress","undefined","__dashjs_factory_name","factory","FactoryMaker","getClassFactory"],"mappings":"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","file":"HTTPLoader.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport XHRLoader from './XHRLoader';\nimport FetchLoader from './FetchLoader';\nimport {HTTPRequest} from '../vo/metrics/HTTPRequest';\nimport FactoryMaker from '../../core/FactoryMaker';\nimport DashJSError from '../vo/DashJSError';\nimport CmcdModel from '../models/CmcdModel';\nimport Utils from '../../core/Utils';\nimport Debug from '../../core/Debug';\n\n/**\n * @module HTTPLoader\n * @ignore\n * @description Manages download of resources via HTTP.\n * @param {Object} cfg - dependancies from parent\n */\nfunction HTTPLoader(cfg) {\n\n    cfg = cfg || {};\n\n    const context = this.context;\n    const errHandler = cfg.errHandler;\n    const dashMetrics = cfg.dashMetrics;\n    const mediaPlayerModel = cfg.mediaPlayerModel;\n    const requestModifier = cfg.requestModifier;\n    const boxParser = cfg.boxParser;\n    const useFetch = cfg.useFetch || false;\n    const errors = cfg.errors;\n    const requestTimeout = cfg.requestTimeout || 0;\n\n    let instance,\n        requests,\n        delayedRequests,\n        retryRequests,\n        downloadErrorToRequestTypeMap,\n        cmcdModel,\n        logger;\n\n    function setup() {\n        logger = Debug(context).getInstance().getLogger(instance);\n        requests = [];\n        delayedRequests = [];\n        retryRequests = [];\n        cmcdModel = CmcdModel(context).getInstance();\n\n        downloadErrorToRequestTypeMap = {\n            [HTTPRequest.MPD_TYPE]: errors.DOWNLOAD_ERROR_ID_MANIFEST_CODE,\n            [HTTPRequest.XLINK_EXPANSION_TYPE]: errors.DOWNLOAD_ERROR_ID_XLINK_CODE,\n            [HTTPRequest.INIT_SEGMENT_TYPE]: errors.DOWNLOAD_ERROR_ID_INITIALIZATION_CODE,\n            [HTTPRequest.MEDIA_SEGMENT_TYPE]: errors.DOWNLOAD_ERROR_ID_CONTENT_CODE,\n            [HTTPRequest.INDEX_SEGMENT_TYPE]: errors.DOWNLOAD_ERROR_ID_CONTENT_CODE,\n            [HTTPRequest.BITSTREAM_SWITCHING_SEGMENT_TYPE]: errors.DOWNLOAD_ERROR_ID_CONTENT_CODE,\n            [HTTPRequest.OTHER_TYPE]: errors.DOWNLOAD_ERROR_ID_CONTENT_CODE\n        };\n    }\n\n    function internalLoad(config, remainingAttempts) {\n        const request = config.request;\n        const traces = [];\n        let firstProgress = true;\n        let needFailureReport = true;\n        let requestStartTime = new Date();\n        let lastTraceTime = requestStartTime;\n        let lastTraceReceivedCount = 0;\n        let httpRequest;\n\n        if (!requestModifier || !dashMetrics || !errHandler) {\n            throw new Error('config object is not correct or missing');\n        }\n\n        const handleLoaded = function (success) {\n            needFailureReport = false;\n\n            request.requestStartDate = requestStartTime;\n            request.requestEndDate = new Date();\n            request.firstByteDate = request.firstByteDate || requestStartTime;\n\n            if (!request.checkExistenceOnly) {\n                dashMetrics.addHttpRequest(request, httpRequest.response ? httpRequest.response.responseURL : null,\n                    httpRequest.response ? httpRequest.response.status : null,\n                    httpRequest.response && httpRequest.response.getAllResponseHeaders ? httpRequest.response.getAllResponseHeaders() :\n                        httpRequest.response ? httpRequest.response.responseHeaders : [],\n                    success ? traces : null);\n\n                if (request.type === HTTPRequest.MPD_TYPE) {\n                    dashMetrics.addManifestUpdate(request.type, request.requestStartDate, request.requestEndDate);\n                }\n            }\n        };\n\n        const onloadend = function () {\n            if (requests.indexOf(httpRequest) === -1) {\n                return;\n            } else {\n                requests.splice(requests.indexOf(httpRequest), 1);\n            }\n\n            if (needFailureReport) {\n                handleLoaded(false);\n\n                if (remainingAttempts > 0) {\n                    remainingAttempts--;\n                    let retryRequest = {config: config};\n                    retryRequests.push(retryRequest);\n                    retryRequest.timeout = setTimeout(function () {\n                        if (retryRequests.indexOf(retryRequest) === -1) {\n                            return;\n                        } else {\n                            retryRequests.splice(retryRequests.indexOf(retryRequest), 1);\n                        }\n                        internalLoad(config, remainingAttempts);\n                    }, mediaPlayerModel.getRetryIntervalsForType(request.type));\n                } else {\n                    errHandler.error(new DashJSError(downloadErrorToRequestTypeMap[request.type], request.url + ' is not available', {\n                        request: request,\n                        response: httpRequest.response\n                    }));\n\n                    if (config.error) {\n                        config.error(request, 'error', httpRequest.response.statusText);\n                    }\n\n                    if (config.complete) {\n                        config.complete(request, httpRequest.response.statusText);\n                    }\n                }\n            }\n        };\n\n        const progress = function (event) {\n            const currentTime = new Date();\n\n            if (firstProgress) {\n                firstProgress = false;\n                if (!event.lengthComputable ||\n                    (event.lengthComputable && event.total !== event.loaded)) {\n                    request.firstByteDate = currentTime;\n                }\n            }\n\n            if (event.lengthComputable) {\n                request.bytesLoaded = event.loaded;\n                request.bytesTotal = event.total;\n            }\n\n            if (!event.noTrace) {\n                traces.push({\n                    s: lastTraceTime,\n                    d: event.time ? event.time : currentTime.getTime() - lastTraceTime.getTime(),\n                    b: [event.loaded ? event.loaded - lastTraceReceivedCount : 0]\n                });\n\n                lastTraceTime = currentTime;\n                lastTraceReceivedCount = event.loaded;\n            }\n\n            if (config.progress && event) {\n                config.progress(event);\n            }\n        };\n\n        const onload = function () {\n            if (httpRequest.response.status >= 200 && httpRequest.response.status <= 299) {\n                handleLoaded(true);\n\n                if (config.success) {\n                    config.success(httpRequest.response.response, httpRequest.response.statusText, httpRequest.response.responseURL);\n                }\n\n                if (config.complete) {\n                    config.complete(request, httpRequest.response.statusText);\n                }\n            }\n        };\n\n        const onabort = function () {\n            if (config.abort) {\n                config.abort(request);\n            }\n        };\n\n        const ontimeout = function (event) {\n            let timeoutMessage;\n            if (event.lengthComputable) {\n                let percentageComplete = (event.loaded / event.total) * 100;\n                timeoutMessage = 'Request timeout: loaded: ' + event.loaded + ', out of: ' + event.total + ' : ' + percentageComplete.toFixed(3) + '% Completed';\n            } else {\n                timeoutMessage = 'Request timeout: non-computable download size';\n            }\n            logger.warn(timeoutMessage);\n        };\n\n        let loader;\n        if (useFetch && window.fetch && request.responseType === 'arraybuffer' && request.type === HTTPRequest.MEDIA_SEGMENT_TYPE) {\n            loader = FetchLoader(context).create({\n                requestModifier: requestModifier,\n                boxParser: boxParser\n            });\n        } else {\n            loader = XHRLoader(context).create({\n                requestModifier: requestModifier\n            });\n        }\n\n        let modifiedUrl = requestModifier.modifyRequestURL(request.url);\n        const additionalQueryParameter = _getAdditionalQueryParameter(request);\n        modifiedUrl = Utils.addAditionalQueryParameterToUrl(modifiedUrl, additionalQueryParameter);\n        const verb = request.checkExistenceOnly ? HTTPRequest.HEAD : HTTPRequest.GET;\n        const withCredentials = mediaPlayerModel.getXHRWithCredentialsForType(request.type);\n\n\n        httpRequest = {\n            url: modifiedUrl,\n            method: verb,\n            withCredentials: withCredentials,\n            request: request,\n            onload: onload,\n            onend: onloadend,\n            onerror: onloadend,\n            progress: progress,\n            onabort: onabort,\n            ontimeout: ontimeout,\n            loader: loader,\n            timeout: requestTimeout\n        };\n\n        // Adds the ability to delay single fragment loading time to control buffer.\n        let now = new Date().getTime();\n        if (isNaN(request.delayLoadingTime) || now >= request.delayLoadingTime) {\n            // no delay - just send\n            requests.push(httpRequest);\n            loader.load(httpRequest);\n        } else {\n            // delay\n            let delayedRequest = {httpRequest: httpRequest};\n            delayedRequests.push(delayedRequest);\n            delayedRequest.delayTimeout = setTimeout(function () {\n                if (delayedRequests.indexOf(delayedRequest) === -1) {\n                    return;\n                } else {\n                    delayedRequests.splice(delayedRequests.indexOf(delayedRequest), 1);\n                }\n                try {\n                    requestStartTime = new Date();\n                    lastTraceTime = requestStartTime;\n                    requests.push(delayedRequest.httpRequest);\n                    loader.load(delayedRequest.httpRequest);\n                } catch (e) {\n                    delayedRequest.httpRequest.onerror();\n                }\n            }, (request.delayLoadingTime - now));\n        }\n    }\n\n    function _getAdditionalQueryParameter(request) {\n        try {\n            const additionalQueryParameter = [];\n            const cmcdQueryParameter = cmcdModel.getQueryParameter(request);\n\n            if (cmcdQueryParameter) {\n                additionalQueryParameter.push(cmcdQueryParameter);\n            }\n\n            return additionalQueryParameter;\n        } catch (e) {\n            return [];\n        }\n    }\n\n    /**\n     * Initiates a download of the resource described by config.request\n     * @param {Object} config - contains request (FragmentRequest or derived type), and callbacks\n     * @memberof module:HTTPLoader\n     * @instance\n     */\n    function load(config) {\n        if (config.request) {\n            internalLoad(\n                config,\n                mediaPlayerModel.getRetryAttemptsForType(\n                    config.request.type\n                )\n            );\n        } else {\n            if (config.error) {\n                config.error(config.request, 'error');\n            }\n        }\n    }\n\n    /**\n     * Aborts any inflight downloads\n     * @memberof module:HTTPLoader\n     * @instance\n     */\n    function abort() {\n        retryRequests.forEach(t => {\n            clearTimeout(t.timeout);\n            // abort request in order to trigger LOADING_ABANDONED event\n            if (t.config.request && t.config.abort) {\n                t.config.abort(t.config.request);\n            }\n        });\n        retryRequests = [];\n\n        delayedRequests.forEach(x => clearTimeout(x.delayTimeout));\n        delayedRequests = [];\n\n        requests.forEach(x => {\n            // abort will trigger onloadend which we don't want\n            // when deliberately aborting inflight requests -\n            // set them to undefined so they are not called\n            x.onloadend = x.onerror = x.onprogress = undefined;\n            x.loader.abort(x);\n        });\n        requests = [];\n    }\n\n    instance = {\n        load: load,\n        abort: abort\n    };\n\n    setup();\n\n    return instance;\n}\n\nHTTPLoader.__dashjs_factory_name = 'HTTPLoader';\n\nconst factory = FactoryMaker.getClassFactory(HTTPLoader);\nexport default factory;\n"]}