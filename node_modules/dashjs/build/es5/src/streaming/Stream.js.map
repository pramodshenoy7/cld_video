{"version":3,"sources":["../../../../src/streaming/Stream.js"],"names":["Stream","config","context","eventBus","getInstance","urlUtils","manifestModel","mediaPlayerModel","manifestUpdater","adapter","capabilities","errHandler","timelineConverter","dashMetrics","abrController","playbackController","eventController","mediaController","textController","protectionController","videoModel","settings","streamInfo","instance","logger","streamProcessors","isStreamInitialized","isStreamActivated","isMediaInitialized","hasVideoTrack","hasAudioTrack","updateError","isUpdating","fragmentController","thumbnailController","preloaded","boxParser","preloadingScheduled","debug","isEndedEventSignaled","trackChangedEvent","codecCompatibilityTable","setup","getLogger","resetInitialSettings","create","dashConstants","DashConstants","initialize","registerEvents","registerProtectionEvents","trigger","Events","STREAM_UPDATED","on","BUFFERING_COMPLETED","onBufferingCompleted","DATA_UPDATE_COMPLETED","onDataUpdateCompleted","INBAND_EVENTS","onInbandEvents","unRegisterEvents","off","KEY_ERROR","onProtectionError","SERVER_CERTIFICATE_UPDATED","LICENSE_REQUEST_COMPLETE","KEY_SYSTEM_SELECTED","KEY_SESSION_CREATED","KEY_STATUSES_CHANGED","unRegisterProtectionEvents","getStreamId","id","activate","mediaSource","previousBuffers","result","CURRENT_TRACK_CHANGED","onCurrentTrackChanged","getPreloaded","initializeMedia","initializeAfterPreload","deactivate","keepBuffers","ln","length","errored","i","fragmentModel","getFragmentModel","removeExecutedRequestsBeforeTime","getStartTime","getDuration","reset","setPreloaded","isActive","setMediaSource","isMediaSupported","getMediaInfo","splice","dischargePreBuffer","msg","error","DashJSError","Errors","MANIFEST_ERROR_ID_NOSTREAMS_CODE","getValue","fatal","pause","duration","NaN","getIsEndedEventSignaled","setIsEndedEventSignaled","value","start","getPreloadingScheduled","setPreloadingScheduled","getLiveStartTime","manifestInfo","isDynamic","getType","Constants","AUDIO","VIDEO","getId","getStreamInfo","getHasAudioTrack","getHasVideoTrack","getThumbnailController","checkConfig","hasOwnProperty","Error","MISSING_CONFIG_ERROR","getBitrateListFor","type","IMAGE","getBitrateList","mediaInfo","event","message","codec","MUXED","MANIFEST_ERROR_ID_MULTIPLEXED_CODE","TEXT","FRAGMENTED_TEXT","EMBEDDED_TEXT","contentProtection","supportsEncryptedMedia","CAPABILITY_MEDIAKEYS_ERROR_CODE","CAPABILITY_MEDIAKEYS_ERROR_MESSAGE","supportsCodec","e","newMediaInfo","manifest","setCurrentMediaInfo","processor","getProcessorForMediaInfo","currentTime","getTime","info","refreshManifestOnSwitchTrack","refreshManifest","selectMediaInfo","updateTopQualityIndex","switchTrackAsked","abortRequests","getScheduleController","setSeekTarget","setBufferingTime","resetIndexHandler","createStreamProcessor","allMediaForType","optionalSettings","getModel","streamProcessor","mimeType","baseURLController","setBuffer","buffer","replaceIdx","push","ignoreMediaInfo","idx","index","addMediaInfo","initializeMediaForType","getAllMediaInfoForType","initialMediaInfo","addEmbeddedTrack","addTrack","getTracksFor","events","checkInitialMediaSettingsForType","getCurrentTrackFor","STREAM_INITIALIZING","addInlineEvents","getEventsFor","addInbandEvents","element","getElement","filterCodecs","test","nodeName","buffers","createBuffers","checkIfInitializationCompleted","realAdaptation","getAdaptationForType","Array","isArray","Representation_asArray","filter","_","getCodec","hasError","audio","video","DATA_UPDATE_FAILED_ERROR_CODE","DATA_UPDATE_FAILED_ERROR_MESSAGE","initializeForMedia","setTimeSyncCompleted","STREAM_INITIALIZED","liveStartTime","createBuffer","getBuffer","processors","getProcessors","warn","isBufferingCompleted","STREAM_BUFFERING_COMPLETED","mediaType","arr","updateData","updatedStreamInfo","updateStreamInfo","getMediaInfoForType","oldMediaInfo","undefined","isMediaCodecCompatible","newStream","previousStream","compareCodecs","isProtectionCompatible","stream","compareProtectionConfig","newStreamInfo","currentStreamInfo","newAdaptation","currentAdaptation","isAdaptationDrmProtected","adaptation","ContentProtection","Representation","sameMimeType","oldCodecs","map","representation","codecs","newCodecs","codecMatch","some","newCodec","indexOf","partialCodecMatch","oldCodec","codecRootCompatibleWithCodec","codec1","codec2","codecRoot","split","rootCompatible","compatTableCodec","compatibleCodecs","compatibleCodec","preload","__dashjs_factory_name","FactoryMaker","getClassFactory"],"mappings":"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","file":"Stream.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport Constants from './constants/Constants';\nimport DashConstants from '../dash/constants/DashConstants';\nimport StreamProcessor from './StreamProcessor';\nimport FragmentController from './controllers/FragmentController';\nimport ThumbnailController from './thumbnail/ThumbnailController';\nimport EventBus from '../core/EventBus';\nimport Events from '../core/events/Events';\nimport Debug from '../core/Debug';\nimport Errors from '../core/errors/Errors';\nimport FactoryMaker from '../core/FactoryMaker';\nimport DashJSError from './vo/DashJSError';\nimport BoxParser from './utils/BoxParser';\nimport URLUtils from './utils/URLUtils';\n\nfunction Stream(config) {\n\n    config = config || {};\n    const context = this.context;\n    const eventBus = EventBus(context).getInstance();\n    const urlUtils = URLUtils(context).getInstance();\n\n    const manifestModel = config.manifestModel;\n    const mediaPlayerModel = config.mediaPlayerModel;\n    const manifestUpdater = config.manifestUpdater;\n    const adapter = config.adapter;\n    const capabilities = config.capabilities;\n    const errHandler = config.errHandler;\n    const timelineConverter = config.timelineConverter;\n    const dashMetrics = config.dashMetrics;\n    const abrController = config.abrController;\n    const playbackController = config.playbackController;\n    const eventController = config.eventController;\n    const mediaController = config.mediaController;\n    const textController = config.textController;\n    const protectionController = config.protectionController;\n    const videoModel = config.videoModel;\n    const settings = config.settings;\n    let streamInfo = config.streamInfo;\n\n    let instance,\n        logger,\n        streamProcessors,\n        isStreamInitialized,\n        isStreamActivated,\n        isMediaInitialized,\n        hasVideoTrack,\n        hasAudioTrack,\n        updateError,\n        isUpdating,\n        fragmentController,\n        thumbnailController,\n        preloaded,\n        boxParser,\n        preloadingScheduled,\n        debug,\n        isEndedEventSignaled,\n        trackChangedEvent;\n\n    const codecCompatibilityTable = [\n        {\n            'codec': 'avc1',\n            'compatibleCodecs': ['avc3']\n        },\n        {\n            'codec': 'avc3',\n            'compatibleCodecs': ['avc1']\n        }\n    ];\n\n    function setup() {\n        debug = Debug(context).getInstance();\n        logger = debug.getLogger(instance);\n        resetInitialSettings();\n\n        boxParser = BoxParser(context).getInstance();\n\n        fragmentController = FragmentController(context).create({\n            streamInfo: streamInfo,\n            mediaPlayerModel: mediaPlayerModel,\n            dashMetrics: dashMetrics,\n            errHandler: errHandler,\n            settings: settings,\n            boxParser: boxParser,\n            dashConstants: DashConstants,\n            urlUtils: urlUtils\n        });\n    }\n\n    function initialize() {\n        registerEvents();\n        registerProtectionEvents();\n        eventBus.trigger(Events.STREAM_UPDATED, { streamInfo: streamInfo });\n    }\n\n    function registerEvents() {\n        eventBus.on(Events.BUFFERING_COMPLETED, onBufferingCompleted, instance);\n        eventBus.on(Events.DATA_UPDATE_COMPLETED, onDataUpdateCompleted, instance);\n        eventBus.on(Events.INBAND_EVENTS, onInbandEvents, instance);\n    }\n\n    function unRegisterEvents() {\n        eventBus.off(Events.DATA_UPDATE_COMPLETED, onDataUpdateCompleted, instance);\n        eventBus.off(Events.BUFFERING_COMPLETED, onBufferingCompleted, instance);\n        eventBus.off(Events.INBAND_EVENTS, onInbandEvents, instance);\n    }\n\n    function registerProtectionEvents() {\n        if (protectionController) {\n            eventBus.on(Events.KEY_ERROR, onProtectionError, instance);\n            eventBus.on(Events.SERVER_CERTIFICATE_UPDATED, onProtectionError, instance);\n            eventBus.on(Events.LICENSE_REQUEST_COMPLETE, onProtectionError, instance);\n            eventBus.on(Events.KEY_SYSTEM_SELECTED, onProtectionError, instance);\n            eventBus.on(Events.KEY_SESSION_CREATED, onProtectionError, instance);\n            eventBus.on(Events.KEY_STATUSES_CHANGED, onProtectionError, instance);\n        }\n    }\n\n    function unRegisterProtectionEvents() {\n        if (protectionController) {\n            eventBus.off(Events.KEY_ERROR, onProtectionError, instance);\n            eventBus.off(Events.SERVER_CERTIFICATE_UPDATED, onProtectionError, instance);\n            eventBus.off(Events.LICENSE_REQUEST_COMPLETE, onProtectionError, instance);\n            eventBus.off(Events.KEY_SYSTEM_SELECTED, onProtectionError, instance);\n            eventBus.off(Events.KEY_SESSION_CREATED, onProtectionError, instance);\n            eventBus.off(Events.KEY_STATUSES_CHANGED, onProtectionError, instance);\n        }\n    }\n\n    function getStreamId() {\n        return streamInfo ? streamInfo.id : null;\n    }\n\n    /**\n     * Activates Stream by re-initializing some of its components\n     * @param {MediaSource} mediaSource\n     * @memberof Stream#\n     * @param {SourceBuffer} previousBuffers\n     */\n    function activate(mediaSource, previousBuffers) {\n        if (!isStreamActivated) {\n            let result;\n            eventBus.on(Events.CURRENT_TRACK_CHANGED, onCurrentTrackChanged, instance);\n            if (!getPreloaded()) {\n                result = initializeMedia(mediaSource, previousBuffers);\n            } else {\n                initializeAfterPreload();\n                result = previousBuffers;\n            }\n            isStreamActivated = true;\n            return result;\n        }\n        return previousBuffers;\n    }\n\n    /**\n     * Partially resets some of the Stream elements\n     * @memberof Stream#\n     * @param {boolean} keepBuffers\n     */\n    function deactivate(keepBuffers) {\n        let ln = streamProcessors ? streamProcessors.length : 0;\n        const errored = false;\n        for (let i = 0; i < ln; i++) {\n            let fragmentModel = streamProcessors[i].getFragmentModel();\n            fragmentModel.removeExecutedRequestsBeforeTime(getStartTime() + getDuration());\n            streamProcessors[i].reset(errored, keepBuffers);\n        }\n        streamProcessors = [];\n        isStreamActivated = false;\n        isMediaInitialized = false;\n        setPreloaded(false);\n        eventBus.off(Events.CURRENT_TRACK_CHANGED, onCurrentTrackChanged, instance);\n    }\n\n    function isActive() {\n        return isStreamActivated;\n    }\n\n    function setMediaSource(mediaSource) {\n        for (let i = 0; i < streamProcessors.length;) {\n            if (isMediaSupported(streamProcessors[i].getMediaInfo())) {\n                streamProcessors[i].setMediaSource(mediaSource);\n                i++;\n            } else {\n                streamProcessors[i].reset();\n                streamProcessors.splice(i, 1);\n            }\n        }\n\n        for (let i = 0; i < streamProcessors.length; i++) {\n            //Adding of new tracks to a stream processor isn't guaranteed by the spec after the METADATA_LOADED state\n            //so do this after the buffers are created above.\n            streamProcessors[i].dischargePreBuffer();\n        }\n\n        if (streamProcessors.length === 0) {\n            const msg = 'No streams to play.';\n            errHandler.error(new DashJSError(Errors.MANIFEST_ERROR_ID_NOSTREAMS_CODE, msg + 'nostreams', manifestModel.getValue()));\n            logger.fatal(msg);\n        }\n    }\n\n    function resetInitialSettings() {\n        deactivate();\n        isStreamInitialized = false;\n        hasVideoTrack = false;\n        hasAudioTrack = false;\n        updateError = {};\n        isUpdating = false;\n        preloadingScheduled = false;\n        isEndedEventSignaled = false;\n    }\n\n    function reset() {\n\n        if (playbackController) {\n            playbackController.pause();\n        }\n\n        if (fragmentController) {\n            fragmentController.reset();\n            fragmentController = null;\n        }\n\n        streamInfo = null;\n\n        resetInitialSettings();\n\n        unRegisterEvents();\n\n        unRegisterProtectionEvents();\n\n        setPreloaded(false);\n    }\n\n    function getDuration() {\n        return streamInfo ? streamInfo.duration : NaN;\n    }\n\n    function getIsEndedEventSignaled() {\n        return isEndedEventSignaled;\n    }\n\n    function setIsEndedEventSignaled(value) {\n        isEndedEventSignaled = value;\n    }\n\n    function getStartTime() {\n        return streamInfo ? streamInfo.start : NaN;\n    }\n\n    function getPreloadingScheduled() {\n        return preloadingScheduled;\n    }\n\n    function setPreloadingScheduled(value) {\n        preloadingScheduled = value;\n    }\n\n    function getLiveStartTime() {\n        if (!streamInfo.manifestInfo.isDynamic) return NaN;\n        // Get live start time of the video stream (1st in array of streams)\n        // or audio if no video stream\n        for (let i = 0; i < streamProcessors.length; i++) {\n            if (streamProcessors[i].getType() === Constants.AUDIO ||\n                streamProcessors[i].getType() === Constants.VIDEO) {\n                return streamProcessors[i].getLiveStartTime();\n            }\n        }\n        return NaN;\n    }\n\n    function getId() {\n        return streamInfo ? streamInfo.id : null;\n    }\n\n    function getStreamInfo() {\n        return streamInfo;\n    }\n\n    function getHasAudioTrack() {\n        return hasAudioTrack;\n    }\n\n    function getHasVideoTrack() {\n        return hasVideoTrack;\n    }\n\n    function getThumbnailController() {\n        return thumbnailController;\n    }\n\n    function checkConfig() {\n        if (!videoModel || !abrController || !abrController.hasOwnProperty('getBitrateList') || !adapter || !adapter.hasOwnProperty('getAllMediaInfoForType') || !adapter.hasOwnProperty('getEventsFor')) {\n            throw new Error(Constants.MISSING_CONFIG_ERROR);\n        }\n    }\n\n    /**\n     * @param {string} type\n     * @returns {Array}\n     * @memberof Stream#\n     */\n    function getBitrateListFor(type) {\n        checkConfig();\n        if (type === Constants.IMAGE) {\n            if (!thumbnailController) {\n                return [];\n            }\n            return thumbnailController.getBitrateList();\n        }\n        const mediaInfo = getMediaInfo(type);\n        return abrController.getBitrateList(mediaInfo);\n    }\n\n    function onProtectionError(event) {\n        if (event.error) {\n            errHandler.error(event.error);\n            logger.fatal(event.error.message);\n            reset();\n        }\n    }\n\n    function isMediaSupported(mediaInfo) {\n        const type = mediaInfo ? mediaInfo.type : null;\n        let codec,\n            msg;\n\n        if (type === Constants.MUXED) {\n            msg = 'Multiplexed representations are intentionally not supported, as they are not compliant with the DASH-AVC/264 guidelines';\n            logger.fatal(msg);\n            errHandler.error(new DashJSError(Errors.MANIFEST_ERROR_ID_MULTIPLEXED_CODE, msg, manifestModel.getValue()));\n            return false;\n        }\n\n        if (type === Constants.TEXT || type === Constants.FRAGMENTED_TEXT || type === Constants.EMBEDDED_TEXT || type === Constants.IMAGE) {\n            return true;\n        }\n        codec = mediaInfo.codec;\n        logger.debug(type + ' codec: ' + codec);\n\n        if (!!mediaInfo.contentProtection && !capabilities.supportsEncryptedMedia()) {\n            errHandler.error(new DashJSError(Errors.CAPABILITY_MEDIAKEYS_ERROR_CODE, Errors.CAPABILITY_MEDIAKEYS_ERROR_MESSAGE));\n        } else if (!capabilities.supportsCodec(codec)) {\n            msg = type + 'Codec (' + codec + ') is not supported.';\n            logger.error(msg);\n            return false;\n        }\n\n        return true;\n    }\n\n    function onCurrentTrackChanged(e) {\n        if (!streamInfo || e.newMediaInfo.streamInfo.id !== streamInfo.id) return;\n        let mediaInfo = e.newMediaInfo;\n        let manifest = manifestModel.getValue();\n\n        adapter.setCurrentMediaInfo(streamInfo.id, mediaInfo.type, mediaInfo);\n\n        let processor = getProcessorForMediaInfo(mediaInfo);\n        if (!processor) return;\n\n        let currentTime = playbackController.getTime();\n        logger.info('Stream -  Process track changed at current time ' + currentTime);\n\n        logger.debug('Stream -  Update stream controller');\n        if (manifest.refreshManifestOnSwitchTrack) { // Applies only for MSS streams\n            logger.debug('Stream -  Refreshing manifest for switch track');\n            trackChangedEvent = e;\n            manifestUpdater.refreshManifest();\n        } else {\n            processor.selectMediaInfo(mediaInfo);\n            if (mediaInfo.type !== Constants.FRAGMENTED_TEXT) {\n                abrController.updateTopQualityIndex(mediaInfo);\n                processor.switchTrackAsked();\n                processor.getFragmentModel().abortRequests();\n            } else {\n                processor.getScheduleController().setSeekTarget(currentTime);\n                processor.setBufferingTime(currentTime);\n                processor.resetIndexHandler();\n            }\n        }\n    }\n\n    function createStreamProcessor(mediaInfo, allMediaForType, mediaSource, optionalSettings) {\n\n        let fragmentModel = fragmentController.getModel(mediaInfo ? mediaInfo.type : null);\n\n        let streamProcessor = StreamProcessor(context).create({\n            streamInfo: streamInfo,\n            type: mediaInfo ? mediaInfo.type : null,\n            mimeType: mediaInfo ? mediaInfo.mimeType : null,\n            timelineConverter: timelineConverter,\n            adapter: adapter,\n            manifestModel: manifestModel,\n            mediaPlayerModel: mediaPlayerModel,\n            fragmentModel: fragmentModel,\n            dashMetrics: config.dashMetrics,\n            baseURLController: config.baseURLController,\n            abrController: abrController,\n            playbackController: playbackController,\n            mediaController: mediaController,\n            textController: textController,\n            errHandler: errHandler,\n            settings: settings,\n            boxParser: boxParser\n        });\n\n        streamProcessor.initialize(mediaSource, hasVideoTrack);\n        abrController.updateTopQualityIndex(mediaInfo);\n\n        if (optionalSettings) {\n            streamProcessor.setBuffer(optionalSettings.buffer);\n            streamProcessor.setBufferingTime(optionalSettings.currentTime);\n            streamProcessors[optionalSettings.replaceIdx] = streamProcessor;\n        } else {\n            streamProcessors.push(streamProcessor);\n        }\n\n        if (optionalSettings && optionalSettings.ignoreMediaInfo) {\n            return;\n        }\n\n        if (mediaInfo && (mediaInfo.type === Constants.TEXT || mediaInfo.type === Constants.FRAGMENTED_TEXT)) {\n            let idx;\n            for (let i = 0; i < allMediaForType.length; i++) {\n                if (allMediaForType[i].index === mediaInfo.index) {\n                    idx = i;\n                }\n                streamProcessor.addMediaInfo(allMediaForType[i]); //creates text tracks for all adaptations in one stream processor\n            }\n            streamProcessor.selectMediaInfo(allMediaForType[idx]); //sets the initial media info\n        } else {\n            streamProcessor.addMediaInfo(mediaInfo, true);\n        }\n    }\n\n    function initializeMediaForType(type, mediaSource) {\n        const allMediaForType = adapter.getAllMediaInfoForType(streamInfo, type);\n\n        let mediaInfo = null;\n        let initialMediaInfo;\n\n        if (!allMediaForType || allMediaForType.length === 0) {\n            logger.info('No ' + type + ' data.');\n            return;\n        }\n\n        if (type === Constants.VIDEO) {\n            hasVideoTrack = true;\n        }\n\n        if (type === Constants.AUDIO) {\n            hasAudioTrack = true;\n        }\n\n        for (let i = 0, ln = allMediaForType.length; i < ln; i++) {\n            mediaInfo = allMediaForType[i];\n\n            if (type === Constants.EMBEDDED_TEXT) {\n                textController.addEmbeddedTrack(mediaInfo);\n            } else {\n                if (!isMediaSupported(mediaInfo)) continue;\n                mediaController.addTrack(mediaInfo);\n            }\n        }\n\n        if (type === Constants.EMBEDDED_TEXT || mediaController.getTracksFor(type, streamInfo).length === 0) {\n            return;\n        }\n\n        if (type === Constants.IMAGE) {\n            thumbnailController = ThumbnailController(context).create({\n                streamInfo: streamInfo,\n                adapter: adapter,\n                baseURLController: config.baseURLController,\n                timelineConverter: config.timelineConverter,\n                debug: debug,\n                eventBus: eventBus,\n                events: Events,\n                dashConstants: DashConstants\n            });\n            return;\n        }\n\n\n        mediaController.checkInitialMediaSettingsForType(type, streamInfo);\n        initialMediaInfo = mediaController.getCurrentTrackFor(type, streamInfo);\n\n        eventBus.trigger(Events.STREAM_INITIALIZING, {\n            streamInfo: streamInfo,\n            mediaInfo: mediaInfo\n        });\n\n        // TODO : How to tell index handler live/duration?\n        // TODO : Pass to controller and then pass to each method on handler?\n\n        createStreamProcessor(initialMediaInfo, allMediaForType, mediaSource);\n    }\n\n    function addInlineEvents() {\n        if (eventController) {\n            const events = adapter.getEventsFor(streamInfo);\n            eventController.addInlineEvents(events);\n        }\n    }\n\n    function addInbandEvents(events) {\n        if (eventController) {\n            eventController.addInbandEvents(events);\n        }\n    }\n\n    function initializeMedia(mediaSource, previousBuffers) {\n        checkConfig();\n        let element = videoModel.getElement();\n\n        addInlineEvents();\n\n        isUpdating = true;\n\n        filterCodecs(Constants.VIDEO);\n        filterCodecs(Constants.AUDIO);\n\n        if (!element || (element && (/^VIDEO$/i).test(element.nodeName))) {\n            initializeMediaForType(Constants.VIDEO, mediaSource);\n        }\n        initializeMediaForType(Constants.AUDIO, mediaSource);\n        initializeMediaForType(Constants.TEXT, mediaSource);\n        initializeMediaForType(Constants.FRAGMENTED_TEXT, mediaSource);\n        initializeMediaForType(Constants.EMBEDDED_TEXT, mediaSource);\n        initializeMediaForType(Constants.MUXED, mediaSource);\n        initializeMediaForType(Constants.IMAGE, mediaSource);\n\n        //TODO. Consider initialization of TextSourceBuffer here if embeddedText, but no sideloadedText.\n        const buffers = createBuffers(previousBuffers);\n\n        isMediaInitialized = true;\n        isUpdating = false;\n\n        if (streamProcessors.length === 0) {\n            const msg = 'No streams to play.';\n            errHandler.error(new DashJSError(Errors.MANIFEST_ERROR_ID_NOSTREAMS_CODE, msg, manifestModel.getValue()));\n            logger.fatal(msg);\n        } else {\n            checkIfInitializationCompleted();\n        }\n\n        return buffers;\n    }\n\n    function initializeAfterPreload() {\n        isUpdating = true;\n        checkConfig();\n        filterCodecs(Constants.VIDEO);\n        filterCodecs(Constants.AUDIO);\n\n        isMediaInitialized = true;\n        isUpdating = false;\n        if (streamProcessors.length === 0) {\n            const msg = 'No streams to play.';\n            errHandler.error(new DashJSError(Errors.MANIFEST_ERROR_ID_NOSTREAMS_CODE, msg, manifestModel.getValue()));\n            logger.debug(msg);\n        } else {\n            checkIfInitializationCompleted();\n        }\n    }\n\n    function filterCodecs(type) {\n        const realAdaptation = adapter.getAdaptationForType(streamInfo ? streamInfo.index : null, type, streamInfo);\n\n        if (!realAdaptation || !Array.isArray(realAdaptation.Representation_asArray)) return;\n\n        // Filter codecs that are not supported\n        realAdaptation.Representation_asArray = realAdaptation.Representation_asArray.filter((_, i) => {\n            // keep at least codec from lowest representation\n            if (i === 0) return true;\n\n            const codec = adapter.getCodec(realAdaptation, i, true);\n            if (!capabilities.supportsCodec(codec)) {\n                logger.error('[Stream] codec not supported: ' + codec);\n                return false;\n            }\n            return true;\n        });\n    }\n\n    function checkIfInitializationCompleted() {\n        const ln = streamProcessors.length;\n        const hasError = !!updateError.audio || !!updateError.video;\n        let error = hasError ? new DashJSError(Errors.DATA_UPDATE_FAILED_ERROR_CODE, Errors.DATA_UPDATE_FAILED_ERROR_MESSAGE) : null;\n\n        for (let i = 0; i < ln; i++) {\n            if (streamProcessors[i].isUpdating() || isUpdating) {\n                return;\n            }\n        }\n\n        if (!isMediaInitialized) {\n            return;\n        }\n\n        if (protectionController) {\n            // Need to check if streamProcessors exists because streamProcessors\n            // could be cleared in case an error is detected while initializing DRM keysystem\n            for (let i = 0; i < ln && streamProcessors[i]; i++) {\n                if (streamProcessors[i].getType() === Constants.AUDIO ||\n                    streamProcessors[i].getType() === Constants.VIDEO ||\n                    streamProcessors[i].getType() === Constants.FRAGMENTED_TEXT) {\n                    let mediaInfo = streamProcessors[i].getMediaInfo();\n                    if (mediaInfo) {\n                        protectionController.initializeForMedia(mediaInfo);\n                    }\n                }\n            }\n        }\n\n        if (error) {\n            errHandler.error(error);\n        } else if (!isStreamInitialized) {\n            isStreamInitialized = true;\n            timelineConverter.setTimeSyncCompleted(true);\n\n            eventBus.trigger(Events.STREAM_INITIALIZED, {\n                streamInfo: streamInfo,\n                liveStartTime: !preloaded ? getLiveStartTime() : NaN\n            });\n        }\n\n        // (Re)start ScheduleController:\n        // - in case stream initialization has been completed after 'play' event (case for SegmentBase streams)\n        // - in case stream is complete but a track switch has been requested\n        for (let i = 0; i < ln && streamProcessors[i]; i++) {\n            streamProcessors[i].getScheduleController().start();\n        }\n    }\n\n    function getMediaInfo(type) {\n        let streamProcessor = null;\n\n        for (let i = 0; i < streamProcessors.length; i++) {\n            streamProcessor = streamProcessors[i];\n\n            if (streamProcessor.getType() === type) {\n                return streamProcessor.getMediaInfo();\n            }\n        }\n\n        return null;\n    }\n\n    function createBuffers(previousBuffers) {\n        const buffers = {};\n        for (let i = 0, ln = streamProcessors.length; i < ln; i++) {\n            const buffer = streamProcessors[i].createBuffer(previousBuffers);\n            if (buffer) {\n                buffers[streamProcessors[i].getType()] = buffer.getBuffer();\n            }\n        }\n        return buffers;\n    }\n\n    function onBufferingCompleted() {\n        let processors = getProcessors();\n        const ln = processors.length;\n\n        if (ln === 0) {\n            logger.warn('onBufferingCompleted - can\\'t trigger STREAM_BUFFERING_COMPLETED because no streamProcessor is defined');\n            return;\n        }\n\n        // if there is at least one buffer controller that has not completed buffering yet do nothing\n        for (let i = 0; i < ln; i++) {\n            //if audio or video buffer is not buffering completed state, do not send STREAM_BUFFERING_COMPLETED\n            if (!processors[i].isBufferingCompleted() && (processors[i].getType() === Constants.AUDIO || processors[i].getType() === Constants.VIDEO)) {\n                logger.warn('onBufferingCompleted - One streamProcessor has finished but', processors[i].getType(), 'one is not buffering completed');\n                return;\n            }\n        }\n\n        logger.debug('onBufferingCompleted - trigger STREAM_BUFFERING_COMPLETED');\n        eventBus.trigger(Events.STREAM_BUFFERING_COMPLETED, { streamInfo: streamInfo });\n    }\n\n    function onDataUpdateCompleted(e) {\n        updateError[e.mediaType] = e.error;\n        checkIfInitializationCompleted();\n    }\n\n    function onInbandEvents(e) {\n        addInbandEvents(e.events);\n    }\n\n    function getProcessorForMediaInfo(mediaInfo) {\n        if (!mediaInfo) {\n            return null;\n        }\n\n        let processors = getProcessors();\n\n        return processors.filter(function (processor) {\n            return (processor.getType() === mediaInfo.type);\n        })[0];\n    }\n\n    function getProcessors() {\n        let arr = [];\n\n        let type,\n            streamProcessor;\n\n        for (let i = 0; i < streamProcessors.length; i++) {\n            streamProcessor = streamProcessors[i];\n            type = streamProcessor.getType();\n\n            if (type === Constants.AUDIO || type === Constants.VIDEO || type === Constants.FRAGMENTED_TEXT || type === Constants.TEXT) {\n                arr.push(streamProcessor);\n            }\n        }\n\n        return arr;\n    }\n\n    function updateData(updatedStreamInfo) {\n        logger.info('Manifest updated... updating data system wide.');\n\n        isStreamActivated = false;\n        isUpdating = true;\n        streamInfo = updatedStreamInfo;\n\n        eventBus.trigger(Events.STREAM_UPDATED, { streamInfo: streamInfo });\n\n        if (eventController) {\n            addInlineEvents();\n        }\n\n        filterCodecs(Constants.VIDEO);\n        filterCodecs(Constants.AUDIO);\n\n        for (let i = 0, ln = streamProcessors.length; i < ln; i++) {\n            let streamProcessor = streamProcessors[i];\n            streamProcessor.updateStreamInfo(streamInfo);\n            let mediaInfo = adapter.getMediaInfoForType(streamInfo, streamProcessor.getType());\n            // Check if AdaptationSet has not been removed in MPD update\n            if (mediaInfo) {\n                abrController.updateTopQualityIndex(mediaInfo);\n                streamProcessor.addMediaInfo(mediaInfo, true);\n            }\n        }\n\n        if (trackChangedEvent) {\n            let mediaInfo = trackChangedEvent.newMediaInfo;\n            if (mediaInfo.type !== Constants.FRAGMENTED_TEXT) {\n                let processor = getProcessorForMediaInfo(trackChangedEvent.oldMediaInfo);\n                if (!processor) return;\n                processor.switchTrackAsked();\n                trackChangedEvent = undefined;\n            }\n        }\n\n        isUpdating = false;\n        checkIfInitializationCompleted();\n    }\n\n    function isMediaCodecCompatible(newStream, previousStream = null) {\n        return compareCodecs(newStream, Constants.VIDEO, previousStream) && compareCodecs(newStream, Constants.AUDIO, previousStream);\n    }\n\n    function isProtectionCompatible(stream, previousStream = null) {\n        return compareProtectionConfig(stream, Constants.VIDEO, previousStream) && compareProtectionConfig(stream, Constants.AUDIO, previousStream);\n    }\n\n    function compareProtectionConfig(stream, type, previousStream = null) {\n        if (!stream) {\n            return false;\n        }\n        const newStreamInfo = stream.getStreamInfo();\n        const currentStreamInfo = previousStream ? previousStream.getStreamInfo() : getStreamInfo();\n\n        if (!newStreamInfo || !currentStreamInfo) {\n            return false;\n        }\n\n        const newAdaptation = adapter.getAdaptationForType(newStreamInfo.index, type, newStreamInfo);\n        const currentAdaptation = adapter.getAdaptationForType(currentStreamInfo.index, type, currentStreamInfo);\n\n        if (!newAdaptation || !currentAdaptation) {\n            // If there is no adaptation for neither the old or the new stream they're compatible\n            return !newAdaptation && !currentAdaptation;\n        }\n\n        // If the current period is unencrypted and the upcoming one is encrypted we need to reset sourcebuffers.\n        return !(!isAdaptationDrmProtected(currentAdaptation) && isAdaptationDrmProtected(newAdaptation));\n    }\n\n    function isAdaptationDrmProtected(adaptation) {\n\n        if (!adaptation) {\n            // If there is no adaptation for neither the old or the new stream they're compatible\n            return false;\n        }\n\n        // If the current period is unencrypted and the upcoming one is encrypted we need to reset sourcebuffers.\n        return !!(adaptation.ContentProtection || (adaptation.Representation && adaptation.Representation.length > 0 && adaptation.Representation[0].ContentProtection));\n    }\n\n    function compareCodecs(newStream, type, previousStream = null) {\n        if (!newStream || !newStream.hasOwnProperty('getStreamInfo')) {\n            return false;\n        }\n        const newStreamInfo = newStream.getStreamInfo();\n        const currentStreamInfo = previousStream ? previousStream.getStreamInfo() : getStreamInfo();\n\n        if (!newStreamInfo || !currentStreamInfo) {\n            return false;\n        }\n\n        const newAdaptation = adapter.getAdaptationForType(newStreamInfo.index, type, newStreamInfo);\n        const currentAdaptation = adapter.getAdaptationForType(currentStreamInfo.index, type, currentStreamInfo);\n\n        if (!newAdaptation || !currentAdaptation) {\n            // If there is no adaptation for neither the old or the new stream they're compatible\n            return !newAdaptation && !currentAdaptation;\n        }\n\n        const sameMimeType = newAdaptation && currentAdaptation && newAdaptation.mimeType === currentAdaptation.mimeType;\n        const oldCodecs = currentAdaptation.Representation_asArray.map((representation) => {\n            return representation.codecs;\n        });\n\n        const newCodecs = newAdaptation.Representation_asArray.map((representation) => {\n            return representation.codecs;\n        });\n\n        const codecMatch = newCodecs.some((newCodec) => {\n            return oldCodecs.indexOf(newCodec) > -1;\n        });\n\n        const partialCodecMatch = newCodecs.some((newCodec) => oldCodecs.some((oldCodec) => codecRootCompatibleWithCodec(oldCodec, newCodec)));\n        return codecMatch || (partialCodecMatch && sameMimeType);\n    }\n\n    // Check if the root of the old codec is the same as the new one, or if it's declared as compatible in the compat table\n    function codecRootCompatibleWithCodec(codec1, codec2) {\n        const codecRoot = codec1.split('.')[0];\n        const rootCompatible = codec2.indexOf(codecRoot) === 0;\n        let compatTableCodec;\n        for (let i = 0; i < codecCompatibilityTable.length; i++) {\n            if (codecCompatibilityTable[i].codec === codecRoot) {\n                compatTableCodec = codecCompatibilityTable[i];\n                break;\n            }\n        }\n        if (compatTableCodec) {\n            return rootCompatible || compatTableCodec.compatibleCodecs.some((compatibleCodec) => codec2.indexOf(compatibleCodec) === 0);\n        }\n        return rootCompatible;\n    }\n\n    function setPreloaded(value) {\n        preloaded = value;\n    }\n\n    function getPreloaded() {\n        return preloaded;\n    }\n\n    function preload(mediaSource, previousBuffers) {\n        if (!getPreloaded()) {\n            addInlineEvents();\n\n            initializeMediaForType(Constants.VIDEO, mediaSource);\n            initializeMediaForType(Constants.AUDIO, mediaSource);\n            initializeMediaForType(Constants.TEXT, mediaSource);\n            initializeMediaForType(Constants.FRAGMENTED_TEXT, mediaSource);\n            initializeMediaForType(Constants.EMBEDDED_TEXT, mediaSource);\n            initializeMediaForType(Constants.MUXED, mediaSource);\n            initializeMediaForType(Constants.IMAGE, mediaSource);\n\n            createBuffers(previousBuffers);\n\n            eventBus.on(Events.CURRENT_TRACK_CHANGED, onCurrentTrackChanged, instance);\n            for (let i = 0; i < streamProcessors.length && streamProcessors[i]; i++) {\n                streamProcessors[i].getScheduleController().start();\n            }\n\n            setPreloaded(true);\n        }\n    }\n\n\n    instance = {\n        initialize: initialize,\n        getStreamId: getStreamId,\n        activate: activate,\n        deactivate: deactivate,\n        isActive: isActive,\n        getDuration: getDuration,\n        getStartTime: getStartTime,\n        getId: getId,\n        getStreamInfo: getStreamInfo,\n        getHasAudioTrack: getHasAudioTrack,\n        getHasVideoTrack: getHasVideoTrack,\n        preload: preload,\n        getThumbnailController: getThumbnailController,\n        getBitrateListFor: getBitrateListFor,\n        updateData: updateData,\n        reset: reset,\n        getProcessors: getProcessors,\n        setMediaSource: setMediaSource,\n        isMediaCodecCompatible: isMediaCodecCompatible,\n        isProtectionCompatible: isProtectionCompatible,\n        getPreloaded: getPreloaded,\n        getPreloadingScheduled,\n        setPreloadingScheduled,\n        getIsEndedEventSignaled,\n        setIsEndedEventSignaled\n    };\n\n    setup();\n    return instance;\n}\n\nStream.__dashjs_factory_name = 'Stream';\nexport default FactoryMaker.getClassFactory(Stream);\n"]}