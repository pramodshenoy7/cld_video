{"version":3,"sources":["../../../../../../src/streaming/rules/abr/ABRRulesCollection.js"],"names":["QUALITY_SWITCH_RULES","ABANDON_FRAGMENT_RULES","ABRRulesCollection","config","context","mediaPlayerModel","dashMetrics","settings","instance","qualitySwitchRules","abandonFragmentRules","initialize","get","streaming","abr","useDefaultABRRules","ABRStrategy","Constants","ABR_STRATEGY_L2A","push","create","ABR_STRATEGY_LoLP","customRules","getABRCustomRules","forEach","rule","type","getActiveRules","srArray","filter","sr","quality","SwitchRequest","NO_CHANGE","getMinSwitchRequest","values","i","len","req","newQuality","length","PRIORITY","STRONG","WEAK","DEFAULT","priority","Math","min","getMaxQuality","rulesContext","switchRequestArray","map","getMaxIndex","activeRules","maxQuality","shouldAbandonFragment","abandonRequestArray","shouldAbandon","reset","rules","getQualitySwitchRules","__dashjs_factory_name","factory","FactoryMaker","getClassFactory","updateSingletonFactory"],"mappings":"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","file":"ABRRulesCollection.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport ThroughputRule from './ThroughputRule';\nimport InsufficientBufferRule from './InsufficientBufferRule';\nimport AbandonRequestsRule from './AbandonRequestsRule';\nimport DroppedFramesRule from './DroppedFramesRule';\nimport SwitchHistoryRule from './SwitchHistoryRule';\nimport BolaRule from './BolaRule';\nimport L2ARule from './L2ARule.js';\nimport LoLPRule from './lolp/LoLpRule.js';\nimport FactoryMaker from '../../../core/FactoryMaker';\nimport SwitchRequest from '../SwitchRequest';\nimport Constants from '../../constants/Constants';\n\nconst QUALITY_SWITCH_RULES = 'qualitySwitchRules';\nconst ABANDON_FRAGMENT_RULES = 'abandonFragmentRules';\n\n\nfunction ABRRulesCollection(config) {\n\n    config = config || {};\n    const context = this.context;\n\n    const mediaPlayerModel = config.mediaPlayerModel;\n    const dashMetrics = config.dashMetrics;\n    const settings = config.settings;\n\n    let instance,\n        qualitySwitchRules,\n        abandonFragmentRules;\n\n    function initialize() {\n        qualitySwitchRules = [];\n        abandonFragmentRules = [];\n\n        if (settings.get().streaming.abr.useDefaultABRRules) {\n\n            // If L2A is used we only need this one rule\n            if (settings.get().streaming.abr.ABRStrategy === Constants.ABR_STRATEGY_L2A) {\n                qualitySwitchRules.push(\n                    L2ARule(context).create({\n                        dashMetrics: dashMetrics,\n                        mediaPlayerModel: mediaPlayerModel,\n                        settings: settings\n                    })\n                );\n            }\n            // If LoLP is used we only need this one rule\n            else if (settings.get().streaming.abr.ABRStrategy === Constants.ABR_STRATEGY_LoLP) {\n                qualitySwitchRules.push(\n                    LoLPRule(context).create({\n                        dashMetrics: dashMetrics\n                    })\n                );\n            } else {\n                // Only one of BolaRule and ThroughputRule will give a switchRequest.quality !== SwitchRequest.NO_CHANGE.\n                // This is controlled by useBufferOccupancyABR mechanism in AbrController.\n                qualitySwitchRules.push(\n                    BolaRule(context).create({\n                        dashMetrics: dashMetrics,\n                        mediaPlayerModel: mediaPlayerModel,\n                        settings: settings\n                    })\n                );\n\n                qualitySwitchRules.push(\n                    ThroughputRule(context).create({\n                        dashMetrics: dashMetrics\n                    })\n                );\n                qualitySwitchRules.push(\n                    InsufficientBufferRule(context).create({\n                        dashMetrics: dashMetrics\n                    })\n                );\n                qualitySwitchRules.push(\n                    SwitchHistoryRule(context).create()\n                );\n                qualitySwitchRules.push(\n                    DroppedFramesRule(context).create()\n                );\n\n                abandonFragmentRules.push(\n                    AbandonRequestsRule(context).create({\n                        dashMetrics: dashMetrics,\n                        mediaPlayerModel: mediaPlayerModel,\n                        settings: settings\n                    })\n                );\n            }\n        }\n\n        // add custom ABR rules if any\n        const customRules = mediaPlayerModel.getABRCustomRules();\n        customRules.forEach(function (rule) {\n            if (rule.type === QUALITY_SWITCH_RULES) {\n                qualitySwitchRules.push(rule.rule(context).create());\n            }\n\n            if (rule.type === ABANDON_FRAGMENT_RULES) {\n                abandonFragmentRules.push(rule.rule(context).create());\n            }\n        });\n    }\n\n    function getActiveRules(srArray) {\n        return srArray.filter(sr => sr.quality > SwitchRequest.NO_CHANGE);\n    }\n\n    function getMinSwitchRequest(srArray) {\n        const values = {};\n        let i,\n            len,\n            req,\n            newQuality,\n            quality;\n\n        if (srArray.length === 0) {\n            return;\n        }\n\n        values[SwitchRequest.PRIORITY.STRONG] = SwitchRequest.NO_CHANGE;\n        values[SwitchRequest.PRIORITY.WEAK] = SwitchRequest.NO_CHANGE;\n        values[SwitchRequest.PRIORITY.DEFAULT] = SwitchRequest.NO_CHANGE;\n\n        for (i = 0, len = srArray.length; i < len; i += 1) {\n            req = srArray[i];\n            if (req.quality !== SwitchRequest.NO_CHANGE) {\n                values[req.priority] = values[req.priority] > SwitchRequest.NO_CHANGE ? Math.min(values[req.priority], req.quality) : req.quality;\n            }\n        }\n\n        if (values[SwitchRequest.PRIORITY.WEAK] !== SwitchRequest.NO_CHANGE) {\n            newQuality = values[SwitchRequest.PRIORITY.WEAK];\n        }\n\n        if (values[SwitchRequest.PRIORITY.DEFAULT] !== SwitchRequest.NO_CHANGE) {\n            newQuality = values[SwitchRequest.PRIORITY.DEFAULT];\n        }\n\n        if (values[SwitchRequest.PRIORITY.STRONG] !== SwitchRequest.NO_CHANGE) {\n            newQuality = values[SwitchRequest.PRIORITY.STRONG];\n        }\n\n        if (newQuality !== SwitchRequest.NO_CHANGE) {\n            quality = newQuality;\n        }\n\n        return SwitchRequest(context).create(quality);\n    }\n\n    function getMaxQuality(rulesContext) {\n        const switchRequestArray = qualitySwitchRules.map(rule => rule.getMaxIndex(rulesContext));\n        const activeRules = getActiveRules(switchRequestArray);\n        const maxQuality = getMinSwitchRequest(activeRules);\n\n        return maxQuality || SwitchRequest(context).create();\n    }\n\n    function shouldAbandonFragment(rulesContext) {\n        const abandonRequestArray = abandonFragmentRules.map(rule => rule.shouldAbandon(rulesContext));\n        const activeRules = getActiveRules(abandonRequestArray);\n        const shouldAbandon = getMinSwitchRequest(activeRules);\n\n        return shouldAbandon || SwitchRequest(context).create();\n    }\n\n    function reset() {\n        [qualitySwitchRules, abandonFragmentRules].forEach(rules => {\n            if (rules && rules.length) {\n                rules.forEach(rule => rule.reset && rule.reset());\n            }\n        });\n        qualitySwitchRules = [];\n        abandonFragmentRules = [];\n    }\n\n    function getQualitySwitchRules() {\n        return qualitySwitchRules;\n    }\n\n    instance = {\n        initialize,\n        reset,\n        getMaxQuality,\n        shouldAbandonFragment,\n        getQualitySwitchRules\n    };\n\n    return instance;\n}\n\nABRRulesCollection.__dashjs_factory_name = 'ABRRulesCollection';\nconst factory = FactoryMaker.getClassFactory(ABRRulesCollection);\nfactory.QUALITY_SWITCH_RULES = QUALITY_SWITCH_RULES;\nfactory.ABANDON_FRAGMENT_RULES = ABANDON_FRAGMENT_RULES;\nFactoryMaker.updateSingletonFactory(ABRRulesCollection.__dashjs_factory_name, factory);\n\nexport default factory;\n"]}